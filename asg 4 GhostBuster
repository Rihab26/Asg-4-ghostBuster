using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System; 


public class Game : MonoBehaviour
{
    
    public Tile[,] grid = new Tile[6, 15];
    
    
    public double probabilitycount = 2; 
    public int gx;  int NC=0;  double GHOSTPROBABILITY =0;
    public  int gy;
    public  int lastcheckedX;
    public  int lastcheckedY;
    public int NumberOfOranges=0;
    public int NumberOfReds=2;
    public int NumberOfYellow=0;
    public int NumberOfGreens=0;
    public int redDistance=0;
    public double[,] Table = new double [26,6];

  public doule calc(string color, int DistanceFromGhost)
  {
  return Table[color - 'a'][min(5,DistanceFromGhost)];
  }
  public void ProJointTableProbability() 
     {           
        //Table 1
          Table['y' - 'a'][3] = 0.5;
          Table['y' - 'a'][4] = 0.5;
          Table['r' - 'a'][3] = Table['r' - 'a'][4] = 0.05;
          Table['g' - 'a'][3] = Table['g' - 'a'][4] = 0.03;
          Table['o' - 'a'][3] = Table['o' - 'a'][4] = 0.15;
          Table['y' - 'a'][1] = Table['y' - 'a'][2] = 0.15;
          Table['y' - 'a'][3] = Table['y' - 'a'][4] = 0.5;
          Table['r' - 'a'][3] = Table['r' - 'a'][4] = 0.05;
          Table['g' - 'a'][3] = Table['g' - 'a'][4] = 0.3;
          Table['o' - 'a'][3] = Table['o' - 'a'][4] = 0.15;
          
        //Table 2
          Table['y' - 'a'][1] = Table['y' - 'a'][2] = 0.15;
          Table['r' - 'a'][1] = Table['r' - 'a'][2] = 0.3;
          Table['g' - 'a'][1] = Table['g' - 'a'][2] = 0.05;
          Table['o' - 'a'][1] = Table['o' - 'a'][2] = 0.5;

        //Table3
         Table['y' - 'a'][5] = 0.3;
         Table['r' - 'a'][5] = 0.05;
         Table['g' - 'a'][5] = 0.5;
         Table['o' - 'a'][5] = 0.15;


        //Table4
          Table['r' - 'a'][0] = 0.7;
          Table['y' - 'a'][0]  = 0.05;
          Table['g' - 'a'][0]  = 0.05;
          Table['o' - 'a'][0] = 0.2;

         
    }
    void Start() { 
        PlaceGhost();
        

    }
    

    public void CheckInputGrid() { 
          int Distance=0, DistanceX=0, DistanceY=0;
            
          
            if(Input.GetButtonDown("Fire1")) 
            { 
                Vector3 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                    int a = Mathf.RoundToInt(mousePosition.x);
                    int b = Mathf.RoundToInt(mousePosition.y);
                    if(a>5 || b >14 || a<0 || b<0)
                     {      
                            return;
                    }
                     mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                    int x = Mathf.RoundToInt(mousePosition.x);
                    int y = Mathf.RoundToInt(mousePosition.y);
                    lastcheckedX=x; lastcheckedY=y;
                   
                      if(lastcheckedX>=gx) DistanceX = lastcheckedX-gx;
                             else DistanceX = gx-lastcheckedX;
                    if(lastcheckedY>=gy) DistanceY = lastcheckedY-gy;
                             else DistanceY = gy-lastcheckedY;
                    Distance=DistanceX+DistanceY;
                    Tile tile = grid[x, y];
                    tile.SetIsCovered(false);

                     if(calc("green", Distance)>=0.5 )
                     { 
                            grid[x,y].probability.text=Math.Round(((calc("green", Distance)*0.05))/90,4).ToString();
                                int G = NumberOfGreens;
                                redDistance=Distance;
                             for (int yy =0 ; yy< 15; yy++) { 
                        for (int xx = 0; xx < 6; xx++)
                                                   { 
                                                      
                                   if(xx!= lastcheckedX && yy!= lastcheckedY) 
                                   {   
                                        if(xx>=gx) DistanceX = xx-gx;
                                         else DistanceX = gx-xx;
                                     if(yy>=gy) DistanceY = yy-gy;
                                           else DistanceY = gy-yy;
                                           Distance=DistanceX+DistanceY;
                                       if(calc("green", Distance)>=0.5) 
                                           grid[xx,yy].probability.text=Math.Round((calc("green", Distance)*0.05)/NumberOfGreens,5).ToString(); 
                                          
                                       
                                       if(calc("yellow", Distance)>=0.5) grid[xx,yy].probability.text=Math.Round((calc("yellow", Distance)*0.15)/(90-NumberOfYellow),4).ToString();
                                       if(calc("orange", Distance)>=0.5) grid[xx,yy].probability.text=Math.Round((calc("orange", Distance)*0.3)/(90-NumberOfOranges),4).ToString();
                                       if(calc("red", Distance)>=0.5) grid[xx,yy].probability.text=Math.Round((calc("red", Distance)*0.5),4).ToString();

                                   }
                                                      }
                                          }
                            
                    } 
                         else if (calc("yellow", Distance)>=0.5 ) {
                                                       grid[x,y].probability.text=Math.Round(((calc("yellow", Distance)*0.15))/NumberOfYellow, 4).ToString();
                                                        redDistance=Distance;
                                             for (int yy =0 ; yy< 15; yy++) { 
                        for (int xx = 0; xx < 6; xx++)
                                                   {
                                   if(xx!= lastcheckedX && yy!= lastcheckedY) 
                                   {   
                                        if(xx>=gx) DistanceX = xx-gx;
                                         else DistanceX = gx-xx;
                                     if(yy>=gy) DistanceY = yy-gy;
                                           else DistanceY = gy-yy;
                                           Distance=DistanceX+DistanceY;
                                    if(calc("yellow", Distance)>=0.5) grid[xx,yy].probability.text=Math.Round((calc("yellow", Distance)*Distance/(Distance*NumberOfGreens)), 4).ToString();
                                    if(calc("green", Distance)>=0.5)  grid[xx,yy].probability.text=Math.Round((calc("green", Distance)*1/(Distance*NumberOfGreens)), 4).ToString();
                                    if(calc("orange", Distance)>=0.5) grid[xx,yy].probability.text=Math.Round((calc("orange", Distance)*1/(Distance*NumberOfOranges)), 4).ToString();
                                    if(calc("red", Distance)>=0.5)    grid[xx,yy].probability.text=Math.Round((calc("red", Distance)*0.6), 3).ToString();

                                   }
                                                      }
                                          }

                        }
                             else if (calc("orange", Distance)>=0.5  ) {
                                                 grid[x,y].probability.text=Math.Round((calc("orange", Distance)*Distance/(Distance*NumberOfGreens )), 3).ToString();
                                                     redDistance = Distance;
                                                    if(NC<7) NC++;
                                                  for (int yy =0 ; yy< 15; yy++) { 
                                                   for (int xx = 0; xx < 6; xx++)
                                                   {
                                   if(xx!= lastcheckedX && yy!= lastcheckedY) 
                                   {   
                                        if(xx>=gx) DistanceX = xx-gx;
                                         else DistanceX = gx-xx;
                                        if(yy>=gy) DistanceY = yy-gy;
                                           else DistanceY = gy-yy;
                                           Distance=DistanceX+DistanceY;
                                      if(calc("yellow", Distance)>=0.5)   grid[xx,yy].probability.text=Math.Round((calc("yellow", Distance)*1/(Distance+NumberOfYellow)), 3).ToString();
                                       if(calc("green", Distance)>=0.5)  grid[xx,yy].probability.text=Math.Round((calc("green", Distance)*1/(Distance*NumberOfGreens))/NumberOfOranges, 4).ToString();
                                       if(calc("red", Distance)>=0.5) {
                                           if(GHOSTPROBABILITY<1) {

                                               grid[xx,yy].probability.text=Math.Round(NumberOfGreens/90+(NC-0.05)/7,3).ToString();
                                               GHOSTPROBABILITY=NumberOfGreens/90+(NC-0.05)/7;
                                           }
                                           
                                       }  
                                                
                                                

                                       
                                       
                                       
                                      
                                       if(calc("orange", Distance)>=0.5) { 
                                        grid[xx,yy].probability.text=Math.Round((calc("orange", Distance)*Distance/(Distance*NumberOfOranges*NumberOfOranges)),3).ToString();
            
                                       } 

                                   }
                                                      }
                                          }

                        }
                         else { 
                            grid[x,y].probability.text=Math.Round((calc("red", Distance)+0.3),3).ToString();
                            
                             for (int yy =0 ; yy< 15; yy++) { 
                        for (int xx = 0; xx < 6; xx++)
                                                   {
                                   if(xx!= lastcheckedX && yy!= lastcheckedY) 
                                   {   
                                        if(xx>=gx) DistanceX = xx-gx;
                                         else DistanceX = gx-xx;
                                     if(yy>=gy) DistanceY = yy-gy;
                                           else DistanceX = gy-yy;
                                           Distance=DistanceX+DistanceY;
                                  if(calc("yellow", Distance)>=0.5)  grid[xx,yy].probability.text=Math.Round(((calc ("yellow", Distance)*1/(Distance))/90),4).ToString();
                                   if(calc ("orange", Distance)>=0.5)   grid[xx,yy].probability.text=Math.Round(((calc ("orange", Distance)*1/(Distance))/90),4).ToString();
                                   if(calc ("green", Distance)>=0.5)  grid[xx,yy].probability.text=Math.Round(((calc ("green", Distance)*1/(Distance))/90),4).ToString();

                                   }
                                                      }
                                          }

                         } 
                    
                  
            }
    }
  
    public void PlaceGhost () 
    { 
                 int x = UnityEngine.Random.Range(0, 6);
                 int y = UnityEngine.Random.Range(0, 15);
            if( grid[x, y]==null)
             { 
                Tile ghostTile =  Instantiate(Resources.Load("Prefabs/red", typeof(Tile)), new Vector3(x, y, 0), Quaternion.identity) as Tile;
                grid[x, y]=ghostTile;
               
                gx=x; gy=y;
                Debug.Log("("+gx+", "+ gy+ ")");
                PlaceNoisyPrint();
                PlaceColor(x, y);
                 
                
            } else { 
                PlaceGhost();
            }

    }
    public void PlaceNoisyPrint()  
    {
        int x = UnityEngine.Random.Range(0, 6);
        int y = UnityEngine.Random.Range(0, 15);
            if( grid[x, y]==null )
             { 
                Tile noisyPrint =  Instantiate(Resources.Load("Prefabs/red", typeof(Tile)), new Vector3(x, y, 0), Quaternion.identity) as Tile;
                grid[x, y]=noisyPrint;
            } else { 
                PlaceNoisyPrint();
            }
    }
    
    public void PlaceColor(int X, int Y)
    {   int DistanceX=0, DistanceY=0, Distance=0;
        for (int y =0 ; y< 15; y++) { 
            for (int x = 0; x < 6; x++)
            {
                
                    if(x>=X) DistanceX = x-X;
                             else DistanceX = X-x;
                    if(y>=Y) DistanceY = y-Y;
                             else DistanceY = Y-y;
                    Distance=DistanceX+DistanceY;

                    
                    
                    if(calc ("green", Distance)>=0.5 && calc ("yellow", Distance)<0.5 && calc ("orange", Distance)<0.5 && grid[x,y]==null)
                     { 
                        Tile color =  Instantiate(Resources.Load("Prefabs/green", typeof(Tile)), new Vector3(x, y, 0), Quaternion.identity) as Tile;
                        grid[x, y]=color;
                        NumberOfGreens++;

                    } 
                         else if (calc ("yellow", Distance)>=0.5 && grid[x,y]==null) {
                        Tile color =  Instantiate(Resources.Load("Prefabs/yellow", typeof(Tile)), new Vector3(x, y, 0), Quaternion.identity) as Tile;
                        grid[x, y]=color;
                        NumberOfYellow++;
                        }
                              else if (calc("orange", Distance)>=0.5  && grid[x,y]==null) {
                        Tile color =  Instantiate(Resources.Load("Prefabs/orange", typeof(Tile)), new Vector3(x, y, 0), Quaternion.identity) as Tile;
                        grid[x, y]=color;
                        NumberOfOranges++;
                        }
                                 
                                    
                
            }
        }
    }

   
}



        
     
